package mx.itesm.beneficiojuventud.view

import android.Manifest
import android.content.pm.PackageManager
import android.os.Build
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.content.ContextCompat
import androidx.navigation.NavHostController
import androidx.navigation.compose.rememberNavController
import com.google.android.gms.tasks.OnCompleteListener
import com.google.firebase.Firebase
import com.google.firebase.messaging.FirebaseMessaging
import com.google.firebase.messaging.messaging
import kotlinx.coroutines.delay
import mx.itesm.beneficiojuventud.R
import mx.itesm.beneficiojuventud.components.MainButton

/**
 * Pantalla post-login que solicita permisos de notificaciones y ubicación,
 * y genera el token FCM después de que el usuario haya iniciado sesión.
 */
@Composable
fun PostLoginPermissions(
    nav: NavHostController,
    destinationRoute: String,
    modifier: Modifier = Modifier
) {
    val context = LocalContext.current

    var notificationPermissionGranted by remember {
        mutableStateOf(
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                ContextCompat.checkSelfPermission(
                    context,
                    Manifest.permission.POST_NOTIFICATIONS
                ) == PackageManager.PERMISSION_GRANTED
            } else true
        )
    }

    var locationPermissionGranted by remember {
        mutableStateOf(
            ContextCompat.checkSelfPermission(
                context,
                Manifest.permission.ACCESS_FINE_LOCATION
            ) == PackageManager.PERMISSION_GRANTED ||
                    ContextCompat.checkSelfPermission(
                        context,
                        Manifest.permission.ACCESS_COARSE_LOCATION
                    ) == PackageManager.PERMISSION_GRANTED
        )
    }

    var fcmTokenGenerated by remember { mutableStateOf(false) }
    var currentStep by remember { mutableStateOf(0) } // 0: notis, 1: location, 2: done

    val notificationLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.RequestPermission()
    ) { granted ->
        notificationPermissionGranted = granted
        if (granted) {
            generateFCMToken { success ->
                fcmTokenGenerated = success
                currentStep = 1
            }
        } else currentStep = 1
    }

    val locationLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.RequestMultiplePermissions()
    ) { permissions ->
        locationPermissionGranted = permissions.values.any { it }
        currentStep = 2
    }

    LaunchedEffect(Unit) {
        if (notificationPermissionGranted && locationPermissionGranted) {
            if (!fcmTokenGenerated) {
                generateFCMToken { success ->
                    fcmTokenGenerated = success
                    currentStep = 2
                }
            } else {
                currentStep = 2
            }
        }
    }

    LaunchedEffect(currentStep) {
        if (currentStep == 2) {
            delay(500)
            nav.navigate(destinationRoute) {
                popUpTo("post_login_permissions") { inclusive = true }
                launchSingleTop = true
            }
        }
    }

    val progressBrush = Brush.horizontalGradient(
        colors = listOf(Color(0xFF008D96), Color(0xFF4B4C7E))
    )

    Box(
        modifier = modifier
            .fillMaxSize()
            .background(Color.White),
        contentAlignment = Alignment.Center
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(32.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(24.dp)
        ) {
            Image(
                painter = painterResource(id = R.drawable.logo_beneficio_joven),
                contentDescription = "Logo",
                modifier = Modifier.size(120.dp)
            )

            when (currentStep) {
                0 -> {
                    Text(
                        "Activar Notificaciones",
                        style = TextStyle(
                            fontSize = 24.sp,
                            fontWeight = FontWeight.Bold,
                            color = Color(0xFF616161)
                        ),
                        textAlign = TextAlign.Center
                    )

                    Text(
                        "Para mantenerte informado sobre tus cupones, reservas y nuevas promociones.",
                        style = TextStyle(
                            fontSize = 16.sp,
                            color = Color(0xFF575757)
                        ),
                        textAlign = TextAlign.Center,
                        modifier = Modifier.padding(horizontal = 16.dp)
                    )

                    MainButton(
                        text = "Permitir Notificaciones",
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(top = 16.dp)
                    ) {
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                            notificationLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)
                        } else {
                            notificationPermissionGranted = true
                            generateFCMToken { success ->
                                fcmTokenGenerated = success
                                currentStep = 1
                            }
                        }
                    }

                    TextButton(
                        onClick = { currentStep = 1 },
                        colors = ButtonDefaults.textButtonColors(contentColor = Color.Gray)
                    ) {
                        Text("Omitir por ahora")
                    }
                }

                1 -> {
                    Text(
                        "Activar Ubicación",
                        style = TextStyle(
                            fontSize = 24.sp,
                            fontWeight = FontWeight.Bold,
                            color = Color(0xFF575757)
                        ),
                        textAlign = TextAlign.Center
                    )

                    Text(
                        "Para mostrarte promociones y colaboradores cerca de ti.",
                        style = TextStyle(
                            fontSize = 16.sp,
                            color = Color(0xFF575757).copy(alpha = 0.8f)
                        ),
                        textAlign = TextAlign.Center,
                        modifier = Modifier.padding(horizontal = 16.dp)
                    )

                    MainButton(
                        text = "Permitir Ubicación",
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(top = 16.dp)
                    ) {
                        locationLauncher.launch(
                            arrayOf(
                                Manifest.permission.ACCESS_FINE_LOCATION,
                                Manifest.permission.ACCESS_COARSE_LOCATION
                            )
                        )
                    }

                    TextButton(
                        onClick = { currentStep = 2 },
                        colors = ButtonDefaults.textButtonColors(contentColor = Color.Gray)
                    ) {
                        Text("Omitir por ahora")
                    }
                }
            }

            if (currentStep < 2) {
                // Progress bar con gradiente
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(4.dp)
                        .background(Color.Black.copy(alpha = 0.1f))
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxHeight()
                            .fillMaxWidth((currentStep + 1) / 2f)
                            .background(progressBrush)
                    )
                }
            }
        }
    }
}

/**
 * Genera el token FCM y se suscribe al topic "TarjetaJoven"
 */
private fun generateFCMToken(onComplete: (Boolean) -> Unit) {
    FirebaseMessaging.getInstance().token.addOnCompleteListener(OnCompleteListener { task ->
        if (!task.isSuccessful) {
            println("❌ Error al obtener el token FCM: ${task.exception}")
            onComplete(false)
            return@OnCompleteListener
        }

        val token = task.result
        println("✅ FCM TOKEN generado en login: $token")

        Firebase.messaging.subscribeToTopic("TarjetaJoven")
            .addOnCompleteListener { subscribeTask ->
                val msg = if (subscribeTask.isSuccessful) {
                    "✅ Suscrito a TarjetaJoven"
                } else {
                    "❌ Error al suscribirse: ${subscribeTask.exception}"
                }
                println(msg)
                onComplete(subscribeTask.isSuccessful)
            }
    })
}

@Preview(showBackground = true, showSystemUi = true)
@Composable
fun PreviewPostLoginPermissions() {
    val navController = rememberNavController()
    MaterialTheme {
        PostLoginPermissions(nav = navController, destinationRoute = "home")
    }
}
